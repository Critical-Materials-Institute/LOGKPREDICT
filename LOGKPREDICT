#!/usr/bin/env python

from rdkit import Chem
import sys, os

import re

try:
   lp_dir=os.environ["LOGKPREDICT_DIR"]
except:
   print("Please, set up the environmental variable LOGPREDICT_DIR!")
   exit()

comm="chemprop_predict --num_workers 0 --test_path ML_inp_testONE.csv --features_path ML_feat_testONE.csv --checkpoint_path model.pt --preds_path ML_ONE_preds.csv"

import numpy as np

min_arr=[0., -4., 1., 0., 0.231, 4., 0., 59.8, -1.52, -0.36 ]
max_arr=[1.1000e-01, 0.0000e+00, 4.0000e+00, 4.0000e+00, 1.9420e+00, 9.0000e+00, 1.2220e+01, 1.5679e+03, 8.9800e+00, 1.2600e+00]

def is_transition_metal(at):
    n = at.GetAtomicNum()
    return not (n==1 or (n>=5 and n<=9) or (n>=14 and n<=17) or n==35)

def set_dative_bonds(mol, fromAtoms=(7,8)):
    pt = Chem.GetPeriodicTable()
    rwmol = Chem.RWMol(mol)
    rwmol.UpdatePropertyCache(strict=False)
    metals = [at for at in rwmol.GetAtoms() if is_transition_metal(at)]
    for metal in metals:
        for nbr in metal.GetNeighbors():
            if nbr.GetAtomicNum() in fromAtoms:
                rwmol.RemoveBond(nbr.GetIdx(),metal.GetIdx())
                rwmol.AddBond(nbr.GetIdx(),metal.GetIdx(),Chem.BondType.DATIVE)
    Chem.SanitizeMol(rwmol,Chem.SanitizeFlags.SANITIZE_FINDRADICALS|Chem.SanitizeFlags.SANITIZE_KEKULIZE|Chem.SanitizeFlags.SANITIZE_SETAROMATICITY|Chem.SanitizeFlags.SANITIZE_SETCONJUGATION|Chem.SanitizeFlags.SANITIZE_SETHYBRIDIZATION|Chem.SanitizeFlags.SANITIZE_SYMMRINGS,catchErrors=True)
    return rwmol

with open("ML_inp_testONE.csv",'w') as iw, open("ML_feat_testONE.csv",'w') as fw:
    i_head="smiles"
    print(i_head,file=iw)
    f_head="I_in, Z_lig, Z_met, nrot, met_r, met_CN, E_strain, G_solv, rdhE, rdhC"
    print(f_head,file=fw)
    with open("logk_input",'r') as f:
        dat_lines=f.readlines()

        #features0=dat_lines[1].split()
        features0=dat_lines[1][:-1].split()
        features1=list(map(float,features0[2:]))
        for i in range(10):
            features1[i]=features1[i]-min_arr[i]
            denom=max_arr[i]-min_arr[i]
            if not np.isclose(denom,0.0): features1[i]=features1[i]/denom
            features1[i]=round(features1[i],4)
        features2=list(map(str,features1))
        features=", ".join(features2)
        #features=", ".join(features0[2:])

        print(features,file=fw)
        mod_dat_lines=""
        for line in dat_lines[2:-1]:
           mod_dat_lines+=line
        #mol = Chem.MolFromMolBlock(mod_dat_lines,removeHs=False,sanitize=False)
        mol = Chem.MolFromMolBlock(mod_dat_lines,sanitize=False)
        mol2=set_dative_bonds(mol)
        #print(Chem.MolToSmiles(mol2,allHsExplicit=True,allBondsExplicit=True),file=iw)
        smiles=Chem.MolToSmiles(mol,allHsExplicit=False)
        smiles2=re.sub(r'(->\[[A-Z][a-z]?)(H\d?)',r'\1',smiles)
        smiles3=re.sub(r'(H\d?)(\+\d?\]<-)',r'\2',smiles2)
        print(smiles3,file=iw)

os.system(comm)

with open("ML_ONE_preds.csv") as f1, open("logk_output",'w') as f2:
    lines=f1.readlines()
    logK=lines[1].split(',')[1][:-1]
    print(logK,file=f2)

