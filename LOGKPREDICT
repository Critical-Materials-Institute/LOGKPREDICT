#!/usr/bin/env python

from rdkit import Chem
from rdkit.ML.Descriptors.MoleculeDescriptors import MolecularDescriptorCalculator
import sys, os

import re

try:
   lp_dir=os.environ["LOGKPREDICT_DIR"]
except:
   print("Please, set up the environmental variable LOGPREDICT_DIR!")
   exit()

comm="chemprop_predict --num_workers 0 --test_path ML_inp_testONE.csv --features_path ML_feat_testONE.csv --checkpoint_path "+lp_dir+"/model.pt --preds_path ML_ONE_preds.csv"

import numpy as np

min_arr=[0., -4., 1., 0., 0.231, 4., 0., 59.8, -1.52, -0.36 ]
max_arr=[1.1000e-01, 0.0000e+00, 4.0000e+00, 4.0000e+00, 1.9420e+00, 9.0000e+00, 1.2220e+01, 1.5679e+03, 8.9800e+00, 1.2600e+00]

def rdkit_descr(mol):
    # choose 200 molecular descriptors
    chosen_descriptors = ['BalabanJ', 'BertzCT', 'Chi0', 'Chi0n', 'Chi0v', 'Chi1', 'Chi1n', 'Chi1v', 'Chi2n', 'Chi2v', 'Chi3n', 'Chi3v', 'Chi4n', 'Chi4v', 'EState_VSA1', 'EState_VSA10', 'EState_VSA11', 'EState_VSA2', 'EState_VSA3', 'EState_VSA4', 'EState_VSA5', 'EState_VSA6', 'EState_VSA7', 'EState_VSA8', 'EState_VSA9', 'ExactMolWt', 'FpDensityMorgan1', 'FpDensityMorgan2', 'FpDensityMorgan3', 'FractionCSP3', 'HallKierAlpha', 'HeavyAtomCount', 'HeavyAtomMolWt', 'Ipc', 'Kappa1', 'Kappa2', 'Kappa3', 'LabuteASA', 'MaxAbsEStateIndex', 'MaxAbsPartialCharge', 'MaxEStateIndex', 'MaxPartialCharge', 'MinAbsEStateIndex', 'MinAbsPartialCharge', 'MinEStateIndex', 'MinPartialCharge', 'MolLogP', 'MolMR', 'MolWt', 'NHOHCount', 'NOCount', 'NumAliphaticCarbocycles', 'NumAliphaticHeterocycles', 'NumAliphaticRings', 'NumAromaticCarbocycles', 'NumAromaticHeterocycles', 'NumAromaticRings', 'NumHAcceptors', 'NumHDonors', 'NumHeteroatoms', 'NumRadicalElectrons', 'NumRotatableBonds', 'NumSaturatedCarbocycles', 'NumSaturatedHeterocycles', 'NumSaturatedRings', 'NumValenceElectrons', 'PEOE_VSA1', 'PEOE_VSA10', 'PEOE_VSA11', 'PEOE_VSA12', 'PEOE_VSA13', 'PEOE_VSA14', 'PEOE_VSA2', 'PEOE_VSA3', 'PEOE_VSA4', 'PEOE_VSA5', 'PEOE_VSA6', 'PEOE_VSA7', 'PEOE_VSA8', 'PEOE_VSA9', 'RingCount', 'SMR_VSA1', 'SMR_VSA10', 'SMR_VSA2', 'SMR_VSA3', 'SMR_VSA4', 'SMR_VSA5', 'SMR_VSA6', 'SMR_VSA7', 'SMR_VSA8', 'SMR_VSA9', 'SlogP_VSA1', 'SlogP_VSA10', 'SlogP_VSA11', 'SlogP_VSA12', 'SlogP_VSA2', 'SlogP_VSA3', 'SlogP_VSA4', 'SlogP_VSA5', 'SlogP_VSA6', 'SlogP_VSA7', 'SlogP_VSA8', 'SlogP_VSA9', 'TPSA', 'VSA_EState1', 'VSA_EState10', 'VSA_EState2', 'VSA_EState3', 'VSA_EState4', 'VSA_EState5', 'VSA_EState6', 'VSA_EState7', 'VSA_EState8', 'VSA_EState9', 'fr_Al_COO', 'fr_Al_OH', 'fr_Al_OH_noTert', 'fr_ArN', 'fr_Ar_COO', 'fr_Ar_N', 'fr_Ar_NH', 'fr_Ar_OH', 'fr_COO', 'fr_COO2', 'fr_C_O', 'fr_C_O_noCOO', 'fr_C_S', 'fr_HOCCN', 'fr_Imine', 'fr_NH0', 'fr_NH1', 'fr_NH2', 'fr_N_O', 'fr_Ndealkylation1', 'fr_Ndealkylation2', 'fr_Nhpyrrole', 'fr_SH', 'fr_aldehyde', 'fr_alkyl_carbamate', 'fr_alkyl_halide', 'fr_allylic_oxid', 'fr_amide', 'fr_amidine', 'fr_aniline', 'fr_aryl_methyl', 'fr_azide', 'fr_azo', 'fr_barbitur', 'fr_benzene', 'fr_benzodiazepine', 'fr_bicyclic', 'fr_diazo', 'fr_dihydropyridine', 'fr_epoxide', 'fr_ester', 'fr_ether', 'fr_furan', 'fr_guanido', 'fr_halogen', 'fr_hdrzine', 'fr_hdrzone', 'fr_imidazole', 'fr_imide', 'fr_isocyan', 'fr_isothiocyan', 'fr_ketone', 'fr_ketone_Topliss', 'fr_lactam', 'fr_lactone', 'fr_methoxy', 'fr_morpholine', 'fr_nitrile', 'fr_nitro', 'fr_nitro_arom', 'fr_nitro_arom_nonortho', 'fr_nitroso', 'fr_oxazole', 'fr_oxime', 'fr_para_hydroxylation', 'fr_phenol', 'fr_phenol_noOrthoHbond', 'fr_phos_acid', 'fr_phos_ester', 'fr_piperdine', 'fr_piperzine', 'fr_priamide', 'fr_prisulfonamd', 'fr_pyridine', 'fr_quatN', 'fr_sulfide', 'fr_sulfonamd', 'fr_sulfone', 'fr_term_acetylene', 'fr_tetrazole', 'fr_thiazole', 'fr_thiocyan', 'fr_thiophene', 'fr_unbrch_alkane', 'fr_urea', 'qed']

    # create molecular descriptor calculator
    chosen_descriptors=chosen_descriptors[100:140]
    mol_descriptor_calculator = MolecularDescriptorCalculator(chosen_descriptors)
    # use molecular descriptor calculator on RDKit mol object
    list_of_descriptor_vals = list(mol_descriptor_calculator.CalcDescriptors(mol))
    list_of_descriptor_vals = map(str,list_of_descriptor_vals)
    list_of_descriptor_vals = ', '.join(list_of_descriptor_vals)

    return list_of_descriptor_vals

def is_transition_metal(at):
    n = at.GetAtomicNum()
    return not (n==1 or (n>=5 and n<=9) or (n>=14 and n<=17) or n==35)

def set_dative_bonds(mol, fromAtoms=(7,8)):
    pt = Chem.GetPeriodicTable()
    rwmol = Chem.RWMol(mol)
    rwmol.UpdatePropertyCache(strict=False)
    metals = [at for at in rwmol.GetAtoms() if is_transition_metal(at)]
    for metal in metals:
        for nbr in metal.GetNeighbors():
            if nbr.GetAtomicNum() in fromAtoms:
                rwmol.RemoveBond(nbr.GetIdx(),metal.GetIdx())
                rwmol.AddBond(nbr.GetIdx(),metal.GetIdx(),Chem.BondType.DATIVE)
    Chem.SanitizeMol(rwmol,Chem.SanitizeFlags.SANITIZE_FINDRADICALS|Chem.SanitizeFlags.SANITIZE_KEKULIZE|Chem.SanitizeFlags.SANITIZE_SETAROMATICITY|Chem.SanitizeFlags.SANITIZE_SETCONJUGATION|Chem.SanitizeFlags.SANITIZE_SETHYBRIDIZATION|Chem.SanitizeFlags.SANITIZE_SYMMRINGS,catchErrors=True)
    return rwmol

with open("ML_inp_testONE.csv",'w') as iw, open("ML_feat_testONE.csv",'w') as fw:
    i_head="smiles"
    print(i_head,file=iw)
    f_head="I_in, Z_lig, Z_met, nrot, met_r, met_CN, E_strain, G_solv, rdhE, rdhC"
    print(f_head,file=fw)
    with open("logk_input",'r') as f:
        dat_lines=f.readlines()

        #features0=dat_lines[1].split()
        features0=dat_lines[1][:-1].split()
        #features1=list(map(float,features0[2:]))
        features1=list(map(float,features0[3:5]+features0[6:]))
        for i in range(len(features1)):
            #features1[i]=features1[i]-min_arr[i]
            #denom=max_arr[i]-min_arr[i]
            #if not np.isclose(denom,0.0): features1[i]=features1[i]/denom
            features1[i]=round(features1[i],4)
        features2=list(map(str,features1))
        features3=", ".join(features2)
        #features=", ".join(features0[2:])

        mod_dat_lines=""
        for line in dat_lines[2:-1]:
           mod_dat_lines+=line
        #mol = Chem.MolFromMolBlock(mod_dat_lines,removeHs=False,sanitize=False)
        mol = Chem.MolFromMolBlock(mod_dat_lines,sanitize=False)
        mol2=set_dative_bonds(mol)
        features=rdkit_descr(mol2)
        features = features3 + ',' + features
        print(features,file=fw)

        # Add dative bonds to SMILES string
        smiles=Chem.MolToSmiles(mol2,allHsExplicit=False)
        smiles2=re.sub(r'(->\[[A-Z][a-z]?)(H\d?)',r'\1',smiles)
        smiles3=re.sub(r'(H\d?)(\+\d?\]<-)',r'\2',smiles2)
        print(smiles3,file=iw)

os.system(comm)

with open("ML_ONE_preds.csv") as f1, open("logk_output",'w') as f2:
    lines=f1.readlines()
    logK=lines[1].split(',')[1][:-1]
    print(logK,file=f2)

